import { Collection } from './Collection';
import { DataSource } from "./DataSource";
import { derivedField, View } from './View';
export declare class DataSourceController implements DataSource {
    private static _instance;
    static FIELD_Created: string;
    static FIELD_Modified: string;
    static getInstance(): DataSourceController;
    private controllerConfigs;
    private primarySource;
    private constructor();
    createView(collection: string, name: string, fields: string[], search?: any, sort?: any, derivedFields?: derivedField[]): View;
    view(name: string): View;
    collection(name: string): Collection;
    addDataSource(source: DataSource, isPrimary: boolean): void;
    protected getPrimaryDataSource(): DataSource;
    deleteCompositeArrayElement(collection: string, parentObjectKey: any, propertyName: string, childObjectKey: any): Promise<void>;
    deleteOne(collection: string, object: any): Promise<void>;
    deleteMany(collection: string, filter: any): Promise<void>;
    find(collection: string, filter?: any, sort?: any): Promise<any[]>;
    findOne(collection: string, filter: any): Promise<any>;
    findByKey(collection: string, key: any): Promise<any>;
    insertCompositeArrayElement(collection: string, parentObjectKey: any, propertyName: string, childObject: any): Promise<void>;
    insertMany(collection: string, objects: any[]): Promise<void>;
    insertOne(collection: string, object: any): Promise<void>;
    replaceCompositeArrayElement(collection: string, parentObjectKey: any, propertyName: string, childObject: any): Promise<void>;
    replaceCompositeElement(collection: string, parentObjectKey: any, propertyName: string, childObject: any): Promise<void>;
    replaceOne(collection: string, object: any): Promise<void>;
    updateOne(collection: string, object: any): Promise<void>;
    deleteAll(collection: string): Promise<void>;
    collections(): Promise<string[]>;
    shutdown(): Promise<void>;
}
